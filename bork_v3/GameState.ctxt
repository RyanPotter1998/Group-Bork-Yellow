#BlueJ class context
comment0.target=GameState
comment0.text=\r\n\ The\ GameState\ class\ holds\ everything\ about\ the\ current\ state\ of\ the\ game\ in\ it.\ it\ is\ possibly\ easier\ to\ envision\ the\ GameState\ class\ \r\n\ as\ the\ player\ itself,\ as\ it\ holds\ the\ current\ inventory,\ the\ players\ current\ health\ and\ current\ score.\r\n\r\n
comment1.params=
comment1.target=GameState\ instance()
comment1.text=\r\n\ \ updates\ the\ game\ so\ that\ it\ is\ its\ current\ state\r\n\ \ @return\ TheInstance\ variable,\ which\ is\ the\ GameState\r\n
comment10.params=name
comment10.target=Item\ getItemInVicinityNamed(java.lang.String)
comment10.text=\r\n\ returns\ items\ in\ inventory\ and\ the\ room\r\n\ @param\ name\ String\ of\ item\ being\ called,\ checking\ to\ see\ if\ it\ is\ in\ room\ or\ inventory\r\n\ @return\ an\ item\r\n
comment11.params=name
comment11.target=Item\ getItemFromInventoryNamed(java.lang.String)
comment11.text=\r\n\ gets\ an\ item\ from\ the\ inventory\ that\ goes\ by\ a\ certain\ name\r\n\ @param\ name\ String\ for\ the\ item's\ name\r\n\ @return\ item\ being\ called\r\n
comment12.params=
comment12.target=Room\ getAdventurersCurrentRoom()
comment12.text=\r\n\ gets\ the\ adventurer's\ (player's)\ current\ room\r\n\ used\ in\ loading\ a\ sav\ game\ and\ whenever\ you\ need\ to\ know\ what\ room\ you\ are\ in\r\n\ @return\ room\ you\ are\ currently\ in\r\n
comment13.params=room
comment13.target=void\ setAdventurersCurrentRoom(Room)
comment13.text=\r\n\ sets\ the\ adventurer's\ (player's)\ current\ room\r\n\ used\ in\ the\ "loading"\ a\ ".sav"\ file\r\n\ @param\ room\ Room\ \r\n
comment14.params=
comment14.target=Dungeon\ getDungeon()
comment14.text=\r\n\ returns\ the\ dungeon\ of\ the\ game\r\n\ @return\ the\ dungeon\ of\ the\ game\r\n
comment15.params=def
comment15.target=void\ setHealth(int)
comment15.text=\r\n\ sets\ the\ adventurers\ current/starting\ health\ \r\n\ @param\ def\ Integer\ for\ the\ health\r\n
comment16.params=
comment16.target=int\ getHealth()
comment16.text=\r\n\ get\ adventurers\ current\ health,\ probably\ should\ make\ it\ a\ sort\ of\ fraction\ for\ later\ like\ "2/5"\r\n
comment17.params=amount
comment17.target=void\ increaseHealth(int)
comment17.text=\r\n\ used\ to\ heal\ the\ player\ character,\ if\ a\ negative\ number\ is\ put\ in,\ can\ decrease\ it\r\n\ @param\ amount\ integer\ to\ change\ health\ by.\r\n
comment2.params=
comment2.target=GameState()
comment2.text=\r\n\ Constructor\ for\ GameState\r\n\ @param\ none\r\n\ \r\n
comment3.params=filename
comment3.target=void\ restore(java.lang.String)
comment3.text=\r\n\ The\ "Load\ Game"\ function\ of\ the\ game.\ only\ called\ when\ loading\ a\ ".sav"\ file\r\n\ @param\ filename\ String\ that\ is\ the\ filename\r\n\ @throws\ IllegalSaveFormatException\ if\ save\ file\ not\ compatible\r\n\ @throws\ IllegalSaveFormatException\ if\ there\ is\ no\ filename\ Leader\ after\ the\ version\ indicator\r\n\ @throws\ IllegalSaveFormatException\ if\ there\ is\ an\ item\ name\ that\ does\ not\ exist\ in\ the\ dungeon\r\n
comment4.params=
comment4.target=void\ store()
comment4.text=\r\n\ the\ default\ "Save\ Game"\ function\ of\ bork\r\n\ if\ something\ goes\ wrong\ with\ the\ normal\ store\ method,\ this\ will\ store\ the\ save\ data\ in\ file\ called\ "bork_save.sav"\r\n\ throws\ IOException\ if\ something\ goes\ wrong\ with\ the\ reading\ and\ writing\ of\ files\r\n
comment5.params=saveName
comment5.target=void\ store(java.lang.String)
comment5.text=\r\n\ the\ "Save\ Game"\ function\ of\ bork,\r\n\ will\ write\ the\ current\ condition\ of\ the\ game\ to\ a\ ".sav"\ file\ named\ after\ the\ ".bork"\ file\ used\r\n\ if\ game\ was\ loaded\ from\ a\ ".sav"\ file,\ said\ file\ will\ be\ overwritten.\r\n\ @param\ saveName\ the\ name\ of\ the\ file\ used\ to\ save\ the\ game.\ named\ after\ the\ bork\ file\ used.\r\n\ @throws\ IOException\ if\ something\ goes\ wrong\ with\ the\ reading\ and\ writing\ of\ files.\r\n
comment6.params=dungeon
comment6.target=void\ initialize(Dungeon)
comment6.text=\r\n\ if\ starting\ a\ new\ game,\ starts\ the\ character\ off\ in\ the\ designated\ entry\ of\ the\ dungeon\r\n\ method\ called\ in\ the\ construction\ of\ a\ dungeon\ of\ a\ new\ game\r\n\ @param\ dungeon\ the\ entire\ Dungeon\ class\ being\ read\ from\ the\ bork\ file\r\n
comment7.params=
comment7.target=java.util.ArrayList\ getInventoryNames()
comment7.text=\r\n\ gets\ the\ names\ from\ all\ the\ items\ in\ the\ players\ current\ inventory\r\n\ @returns\ ArrayList<String>\ returns\ all\ the\ items\ in\ the\ inventory\ as\ an\ ArrayList\ of\ Strings,\r\n
comment8.params=item
comment8.target=void\ addToInventory(Item)
comment8.text=\r\n\ adds\ items\ to\ player's\ inventory\r\n\ @param\ item\ an\ Item\ to\ be\ put\ into\ the\ player's\ inventory\r\n
comment9.params=item
comment9.target=void\ removeFromInventory(Item)
comment9.text=\r\n\ removes\ items\ from\ player's\ inventory\r\n\ @param\ item\ the\ Item\ that\ is\ to\ be\ removed\ from\ the\ inventory\r\n
numComments=18
