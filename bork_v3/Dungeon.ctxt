#BlueJ class context
comment0.target=Dungeon
comment1.params=name\ entry
comment1.target=Dungeon(java.lang.String,\ Room)
comment1.text=\r\n\ constructor\ for\ Dungeon\ Class\r\n\ @param\ name\ String\ to\ be\ used\ as\ Dungeon's\ name\r\n\ @param\ entry\ Room\ used\ as\ the\ start\ of\ the\ dungeon\ from\ which\ the\ rest\ of\ the\ dungeon\ will\ be\ built\ around\r\n
comment10.params=room
comment10.target=void\ add(Room)
comment10.text=\r\n\ adds\ a\ room\ to\ a\ the\ Dungeon's\ rooms\ Hashtable\r\n\ called\ in\ the\ construction\ of\ the\ Dungeon\r\n\ @param\ room\ Room\ being\ added\ to\ rooms\ HashTable\r\n
comment11.params=item
comment11.target=void\ add(Item)
comment11.text=\r\n\ Adds\ an\ Item\ to\ the\ Dungeon's\ items\ Hashtable\r\n\ called\ in\ the\ construction\ of\ the\ Dungeon\r\n\ @param\ item\ Item\ being\ added\ to\ items\ Hashtable\r\n
comment12.params=roomTitle
comment12.target=Room\ getRoom(java.lang.String)
comment12.text=\r\n\ Gets\ a\ room\ based\ on\ the\ Room's\ name\r\n\ @param\ roomTitle\ String\ name\ of\ the\ Room\ being\ called\r\n\ @return\ Room\ being\ called\r\n
comment13.params=primaryItemName
comment13.target=Item\ getItem(java.lang.String)
comment13.text=\r\n\ Get\ the\ Item\ object\ whose\ primary\ name\ is\ passed.\ This\ has\ nothing\ to\r\n\ do\ with\ where\ the\ Adventurer\ might\ be,\ or\ what's\ in\ his/her\ inventory,\r\n\ etc.\r\n
comment2.params=filename
comment2.target=Dungeon(java.lang.String)
comment2.text=\r\n\ Read\ from\ the\ .bork\ filename\ passed,\ and\ instantiate\ a\ Dungeon\ object\r\n\ based\ on\ it.\r\n\ @param\ filename\ the\ name\ of\ the\ file\ being\ used\r\n\ @throws\ FileNotFoundException\ if\ there\ isn't\ a\ file\ to\ be\ found,\ ya\ dingus\r\n\ @throws\ IllegalDungeonFormatException\ if\ the\ file\ being\ read\ was\ constructed\ incorrectly\r\n
comment3.params=filename\ initState
comment3.target=Dungeon(java.lang.String,\ boolean)
comment3.text=\r\n\ Read\ from\ the\ .bork\ filename\ passed,\ and\ instantiate\ a\ Dungeon\ object\r\n\ based\ on\ it,\ including\ (possibly)\ the\ items\ in\ their\ original\ locations.\r\n\ @param\ filename\ String\ of\ the\ File\ being\ read\r\n\ @param\ initState\ boolean\ used\ to\ instantiate\ the\ Dungeon\r\n\ @throws\ FileNotFoundException\ if\ there\ isnt\ a\ file\ to\ be\ read,\ you\ cannot\ play\ the\ game\r\n\ @throws\ IllegalDungeonFormatException\ if\ the\ file\ being\ read\ has\ been\ constructed\ incorrectly\r\n
comment4.params=
comment4.target=void\ init()
comment4.text=\ \r\n\ Common\ object\ initialization\ tasks,\ regardless\ of\ which\ constructor\r\n\ is\ used\r\n
comment5.params=w
comment5.target=void\ storeState(java.io.PrintWriter)
comment5.text=\r\n\ Store\ the\ current\ (changeable)\ state\ of\ this\ dungeon\ to\ the\ writer\r\n\ passed.\r\n\ @param\ w\ Printwriter\ that\ will\ write\ to\ the\ .sav\ file\r\n\ @throws\ IOException\r\n
comment6.params=s
comment6.target=void\ restoreState(java.util.Scanner)
comment6.text=\r\n\ Restore\ the\ (changeable)\ state\ of\ this\ dungeon\ to\ that\ reflected\ in\ the\r\n\ reader\ passed.\r\n\ @param\ s\ Scanner\ object\ being\ used\ to\ scan\ the\ ".sav"\ file\ being\ used\ to\ "load"\ a\ game\r\n\ @throws\ GameState.IllegalSaveFormatException\ if\ the\ ".sav"\ file\ is\ constructed\ incorrectly\r\n
comment7.params=
comment7.target=Room\ getEntry()
comment7.text=\r\n\ gets\ the\ entry\ room\ of\ the\ dungeon,\ the\ "seed"\ from\ which\ the\ rest\ of\ the\ dungeon\ is\ built\r\n\ @return\ The\ dungeon's\ entrance\r\n
comment8.params=
comment8.target=java.lang.String\ getName()
comment8.text=\r\n\ Gets\ the\ name\ of\ the\ Dungeon\r\n\ @return\ The\ name\ of\ the\ Dungeon\r\n
comment9.params=
comment9.target=java.lang.String\ getFilename()
comment9.text=\r\n\ Gets\ the\ name\ of\ the\ File\ being\ used\ for\ the\ construction\ of\ the\ Dungeon\r\n\ @return\ String\ of\ name\ of\ File\r\n
numComments=14
