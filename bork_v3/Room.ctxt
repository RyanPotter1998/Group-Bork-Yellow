#BlueJ class context
comment0.target=Room
comment1.params=title
comment1.target=Room(java.lang.String)
comment1.text=\r\n\ constructor\ for\ Room\ class\r\n\ @param\ title\ String\ title\ of\ the\ room\r\n
comment10.params=dir
comment10.target=Room\ leaveBy(java.lang.String)
comment10.text=\r\n\ returns\ the\ Room\ to\ which\ you\ are\ going\r\n\ @param\ dir\ String\ to\ the\ exit\ you\ are\ going\ to\r\n\ @return\ Room\ from\ exit\ destination\r\n\ @return\ null\ if\ you\ cannot\ leave\r\n
comment11.params=exit
comment11.target=void\ addExit(Exit)
comment11.text=\r\n\ Adds\ exit\ to\ the\ Room's\ exit\ array,\ the\ directions\ by\ which\ you\ will\ leave\r\n\ used\ in\ the\ construction\ of\ Rooms\ in\ a\ Dungeon\r\n\ @param\ exit\ Exits\ by\ which\ you\ may\ leave\ the\ room\ being\ put\ into\ the\ Room's\ exit\ array\r\n
comment12.params=item
comment12.target=void\ add(Item)
comment12.text=\r\n\ Adds\ items\ to\ the\ Room\r\n\ used\ in\ the\ Construction\ of\ a\ Room\ class\ to\ house\ initial\ items\ in\ new\ game\r\n\ also\ used\ when\ an\ item\ is\ dropped\ into\ a\ room\r\n\ @param\ item\ Item\ to\ be\ added\ to\ the\ Room's\ contents\ array\r\n
comment13.params=item
comment13.target=void\ remove(Item)
comment13.text=\r\n\ removes\ items\ from\ a\ room\r\n\ normally\ used\ in\ the\ picking\ up\ of\ items\ to\ be\ put\ in\ inventory\r\n\ probably\ could\ be\ used\ in\ some\ kind\ of\ event\ when\ an\ object\ is\ changed\ in\ someway\r\n\ @param\ item\ item\ to\ be\ taken\ out\ of\ Room's\ contents\ array\r\n
comment14.params=name
comment14.target=Item\ getItemNamed(java.lang.String)
comment14.text=\r\n\ gets\ an\ item\ in\ a\ room\ based\ on\ a\ name\r\n\ used\ when\ item\ is\ being\ picked\ up\ from\ Room,\ or\ being\ seen,\ probably\ with\ some\ sort\ of\ "look\ at"\ command\r\n\ @param\ name\ String\ name\ of\ Item\ being\ called\r\n\ @return\ item\ being\ called\ on\ by\ name\r\n\ @throws\ Item.NoItemException\ if\ no\ item\ found\r\n
comment15.params=
comment15.target=java.util.ArrayList\ getContents()
comment15.text=\r\n\ returns\ the\ Room's\ arrayList\ of\ items,\ Contents\r\n\ @return\ ArrayList<Items>\ contents\ of\ the\ room\r\n
comment16.params=
comment16.target=void\ addMonster()
comment16.text=\r\n\ adds\ a\ Monster\ into\ Room\r\n
comment17.params=
comment17.target=void\ removeMonster()
comment17.text=\r\n\ Forcibly\ evicts\ a\ Monster\ from\ the\ Room\r\n
comment18.params=
comment18.target=void\ getMonster()
comment18.text=\r\n\ gets\ you\ are\ monster\ from\ the\ Room's\ monster\ ArrayList,\ not\ sure\ why\ you\ would\ want\ one,\ though\r\n\ @return\ Monster\ Class\ object,\ but\ right\ now\ its\ a\ void\ that\ doesnt\ return\ everything\ because\ there\ is\ no\ monster\ class\r\n
comment2.params=s\ d
comment2.target=Room(java.util.Scanner,\ Dungeon)
comment2.text=\r\n\ constructor\ used\ for\ when\ starting\ to\ read\ a\ file\r\n\ @param\ s\ Scanner\ used\ for\ Scanning\ the\ File\ being\ read\ from\ the\ dungeon\ class\r\n\ @param\ d\ Dungeon\ for\ which\ the\ room\ will\ belong\r\n\ @throws\ NoRoomException\ self\ explanitory,\ thrown\ if\ no\ room\ is\ found\ in\ the\ reading\ of\ a\ file\r\n
comment3.params=s\ d\ initState
comment3.target=Room(java.util.Scanner,\ Dungeon,\ boolean)
comment3.text=\ Given\ a\ Scanner\ object\ positioned\ at\ the\ beginning\ of\ a\ "room"\ file\r\n\ \ \ \ \ \ \ \ entry,\ read\ and\ return\ a\ Room\ object\ representing\ it.\ \r\n\ \ \ \ \ \ \ \ @param\ d\ The\ containing\ {@link\ edu.umw.stephen.bork.Dungeon}\ object,\ \r\n\ \ \ \ \ \ \ \ necessary\ to\ retrieve\ {@link\ edu.umw.stephen.bork.Item}\ objects.\r\n\ \ \ \ \ \ \ \ @param\ initState\ should\ items\ listed\ for\ this\ room\ be\ added\ to\ it?\r\n\ \ \ \ \ \ \ \ @throws\ NoRoomException\ The\ reader\ object\ is\ not\ positioned\ at\ the\r\n\ \ \ \ \ \ \ \ start\ of\ a\ room\ entry.\ A\ side\ effect\ of\ this\ is\ the\ reader's\ cursor\r\n\ \ \ \ \ \ \ \ is\ now\ positioned\ one\ line\ past\ where\ it\ was.\r\n\ \ \ \ \ \ \ \ @throws\ IllegalDungeonFormatException\ A\ structural\ problem\ with\ the\r\n\ \ \ \ \ \ \ \ dungeon\ file\ itself,\ detected\ when\ trying\ to\ read\ this\ room.\r\n
comment4.params=
comment4.target=void\ init()
comment4.text=\ \r\n\ Common\ object\ initialization\ tasks.\r\n
comment5.params=
comment5.target=java.lang.String\ getTitle()
comment5.text=\r\n\ Returns\ title\ of\ Room\r\n\ @return\ String\ title\ of\ Room\r\n
comment6.params=desc
comment6.target=void\ setDesc(java.lang.String)
comment6.text=\r\n\ Sets\ the\ Description\ of\ the\ Room\r\n\ @param\ String\ description\ of\ Room\r\n
comment7.params=w
comment7.target=void\ storeState(java.io.PrintWriter)
comment7.text=\r\n\ Store\ the\ current\ (changeable)\ state\ of\ this\ room\ to\ the\ writer\r\n\ passed.\r\n\ @param\ w\ PrintWriter\ used\ to\ Write\ to\ a\ save\ File\r\n\ @throws\ IOException\r\n
comment8.params=s\ d
comment8.target=void\ restoreState(java.util.Scanner,\ Dungeon)
comment8.text=\r\n\ The\ "Load\ game"\ function,\ pertaining\ to\ the\ room\ portion\ of\ the\ ".sav"\ file\r\n\ @param\ s\ Scanner\ used\ to\ read\ the\ file\ being\ passed\ through\ the\ Dungeon\ d\r\n\ @param\ d\ Dungeon\ to\ which\ the\ room\ belongs\ to\r\n\ @throws\ GameState.IllegalSaveFormatException\ if\ the\ file\ being\ read\ was\ not\ constructed\ correctly\r\n
comment9.params=
comment9.target=java.lang.String\ describe()
comment9.text=\r\n\ Returns\ the\ Room's\ description\r\n\ description\ includes\ how\ the\ room\ looks,\ any\ items\ inside\ it,\ as\ well\ as\ all\ the\ exits\ in\ the\ room\r\n\ usually\ used\ in\ conjuction\ with\ the\ "describe"\ command,\ and\ when\ the\ Room\ is\ entered\ for\ the\ first\ time\r\n\ @return\ String\ of\ the\ description\ of\ the\ Room\r\n
numComments=19
